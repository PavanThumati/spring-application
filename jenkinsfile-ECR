@Library('my-jenkins-shared-library') _
pipeline{
	agent any
	
	parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
		// string(name: 'ImageName', description: "name of the docker build", defaultValue: 'javaapp')
		// string(name: 'ImageTag', description: "tag of the docker build", defaultValue: 'v1')
		// string(name: 'DockerHubUser', description: "name of the Application", defaultValue: 'pavanthumati')

		string(name: 'aws_account_id', description: " AWS Account ID", defaultValue: '435951944183')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'us-east-1')
        string(name: 'ECR_REPO_NAME', description: "name of the ECR", defaultValue: 'pavanthumati')

    }
	environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
    	AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    	AWS_SESSION_TOKEN     = credentials('AWS_SESSION_TOKEN')
    }
	stages{ 
		stage('gitcheckout'){
			when { expression {  params.action == 'create' } }
			steps{
				gitCheckOut(
					branch:'main', 
					url:'https://github.com/PavanThumati/spring-application.git'
				)
			}
		}

		// stage('Unit Test maven'){
		// 	when { expression {  params.action == 'create' } }
		// 	steps{
		// 	   script{
		// 		   mvnTest()
		// 	   }
		// 	}
		// }

		// stage('Integration Test maven'){
		// 	when { expression {  params.action == 'create' } }
		// 	steps{
		// 	   script{
		// 		   mvnIntegrationTest()
		// 	   }
		// 	}
		// }
		// stage('Static code analysis: Sonarqube'){
		//  when { expression {  params.action == 'create' } }
		// 	steps{
		// 	   script{
		// 		   def SonarQubecredentialsId = 'sonarqube-api'
		// 		   staticCodeAnalysis(SonarQubecredentialsId)
		// 	   }
		// 	}
		// }

		// stage('Quality Gate Status Check : Sonarqube'){
		//  when { expression {  params.action == 'create' } }
		// 	steps{
		// 	   script{
				   
		// 		   def SonarQubecredentialsId = 'sonarqube-api'
		// 		   QualityGateStatus(SonarQubecredentialsId)
		// 	   }
		// 	}
		// }
		// stage('Maven Build : maven'){
		//  when { expression {  params.action == 'create' } }
		// 	steps{
		// 	   script{
		// 		   mvnBuild()
		// 	   }
		// 	}
		// }
		stage('Docker Image Build : ECR'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerBuildECR("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }
    	stage('Docker Image Scan: trivy '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImageScanECR("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }
        stage('Docker Image Push : ECR '){
         when { expression {  params.action == 'create' } }
            steps{
				script {
               		sh """
						aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
						aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
						aws configure set aws_session_token $AWS_SESSION_TOKEN
						aws configure set default.region ${params.Region}
					"""
					dockerImagePushECR("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")	
				}
            }
        }   
        stage('Docker Image Cleanup : ECR '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImageCleanupECR("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        } 
	}
}
